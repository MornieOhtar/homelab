apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jellyseerr
  annotations:
    avp.kubernetes.io/path: "kv/data/argocd"
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "false"
    cert-manager.io/cluster-issuer: letsencrypt-production
    # Get Homepage configuration
    gethomepage.dev/enabled: "true"
    gethomepage.dev/description: Video requests
    gethomepage.dev/group: Home
    gethomepage.dev/icon: jellyseerr.png
    gethomepage.dev/name: Jellyseerr
    gethomepage.dev/pod-selector: app.kubernetes.io/name=jellyseerr
    gethomepage.dev/widget.type: "jellyseerr"
    gethomepage.dev/widget.url: "http://jellyseerr:5055"
    gethomepage.dev/widget.key: "<path:kv/data/homepage#jellyseer-key>"
spec:
  ingressClassName: nginx
  rules:
    - host: jellyseerr.<homelab-domain>
      http:
        paths:
          - path: /
            backend:
              service:
                name: jellyseerr
                port:
                  name: jellyseerr
            pathType: Prefix
  tls:
    - hosts:
        - jellyseerr.<homelab-domain>
      secretName: "jellyseerr.<homelab-domain>-cert"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: radarr
  annotations:
    avp.kubernetes.io/path: "kv/data/argocd"
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "false"
    cert-manager.io/cluster-issuer: letsencrypt-production
    # Get Homepage configuration
    gethomepage.dev/enabled: "true"
    gethomepage.dev/description: Movies downloader
    gethomepage.dev/group: Home
    gethomepage.dev/icon: radarr.png
    gethomepage.dev/name: Radarr
    gethomepage.dev/pod-selector: app.kubernetes.io/name=jellyseerr
    gethomepage.dev/widget.type: "radarr"
    gethomepage.dev/widget.url: "http://radarr:7878"
    gethomepage.dev/widget.key: "<path:kv/data/homepage#radarr-key>"
    gethomepage.dev/widget.enableQueue: "true"
spec:
  ingressClassName: nginx
  rules:
    - host: radarr.<homelab-domain>
      http:
        paths:
          - path: /
            backend:
              service:
                name: radarr
                port:
                  name: radarr
            pathType: Prefix
  tls:
    - hosts:
        - radarr.<homelab-domain>
      secretName: "radarr.<homelab-domain>-cert"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sonarr
  annotations:
    avp.kubernetes.io/path: "kv/data/argocd"
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "false"
    cert-manager.io/cluster-issuer: letsencrypt-production
    # Get Homepage configuration
    gethomepage.dev/enabled: "true"
    gethomepage.dev/description: TV Shows downloader
    gethomepage.dev/group: Home
    gethomepage.dev/icon: sonarr.png
    gethomepage.dev/name: Sonarr
    gethomepage.dev/pod-selector: app.kubernetes.io/name=jellyseerr
    gethomepage.dev/widget.type: "sonarr"
    gethomepage.dev/widget.url: "http://sonarr:8989"
    gethomepage.dev/widget.key: "<path:kv/data/homepage#sonarr-key>"
    gethomepage.dev/widget.enableQueue: "true"
spec:
  ingressClassName: nginx
  rules:
    - host: sonarr.<homelab-domain>
      http:
        paths:
          - path: /
            backend:
              service:
                name: sonarr
                port:
                  name: sonarr
            pathType: Prefix
  tls:
    - hosts:
        - sonarr.<homelab-domain>
      secretName: "sonarr.<homelab-domain>-cert"
